{"version":3,"sources":["css-modules/recipe.module.css","components/SearchBar.js","components/Recipe.js","components/RecipeList.js","App.js","serviceWorker.js","index.js","css-modules/search_bar.module.css"],"names":["module","exports","APP_KEY","process","SearchBar","props","updateSearch","e","setState","target","name","value","submitForm","preventDefault","getRecipes","def","search","length","state","api_link","axios","get","then","response","recipes","data","hits","setGlobalRecipes","catch","error","console","log","this","onSubmit","className","style","searchBar","type","placeholder","onChange","searchButton","Component","Recipe","title","ingredients","calories","image","recipeDiv","ingredientsTitle","map","ingredient","item","key","uuidv4","caloriesTitle","toFixed","recipeImage","src","alt","width","RecipeList","r","recipe","label","ingredientLines","App","setRecipes","id","data-color","display","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dc985b25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipeDiv\":\"recipe_recipeDiv__3HKT1\",\"ingredientsTitle\":\"recipe_ingredientsTitle__11_rO\",\"caloriesTitle\":\"recipe_caloriesTitle__1mbNX\",\"ingredients\":\"recipe_ingredients__7d2S3\",\"item\":\"recipe_item__3Tohl\",\"recipeImage\":\"recipe_recipeImage__1_KvI\"};","import React, { Component } from \"react\";\r\nimport style from \"../css-modules/search_bar.module.css\";\r\nimport axios from \"axios\";\r\n\r\nconst APP_ID = process.env.REACT_APP_ID;\r\nconst APP_KEY = process.env.REACT_APP_KEY;\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      search: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getRecipes(\"chicken\");\r\n  }\r\n\r\n  updateSearch = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  submitForm = (e) => {\r\n    e.preventDefault();\r\n    this.getRecipes();\r\n  };\r\n\r\n  getRecipes = (def = \"\") => {\r\n    let search = \"\";\r\n    if (def.length) {\r\n      search = def;\r\n    } else {\r\n      search = this.state.search;\r\n    }\r\n    const api_link = `https://api.edamam.com/search?q=${search}&app_id=${APP_ID}&app_key=${APP_KEY}`;\r\n    axios\r\n      .get(api_link)\r\n      .then((response) => {\r\n        const recipes = response.data.hits;\r\n        this.props.setGlobalRecipes(recipes);\r\n      })\r\n      .catch((error) => console.log);\r\n  };\r\n\r\n  render() {\r\n    const { search } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.submitForm}>\r\n          <div>\r\n            <input\r\n              className={style.searchBar}\r\n              type=\"text\"\r\n              name=\"search\"\r\n              placeholder=\"Search for recipes...\"\r\n              value={search}\r\n              onChange={this.updateSearch}\r\n            />\r\n            <button className={style.searchButton} type=\"submit\">\r\n              Search\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport style from \"../css-modules/recipe.module.css\";\r\n\r\nfunction Recipe({ title, ingredients, calories, image }) {\r\n  return (\r\n    <div className={style.recipeDiv}>\r\n      <h1>{title}</h1>\r\n      <ul className={style.ingredients}>\r\n        <h3 className={style.ingredientsTitle}>Ingredients:</h3>\r\n        {ingredients.map((ingredient) => (\r\n          <li className={style.item} key={uuidv4()}>\r\n            {ingredient}\r\n          </li>\r\n        ))}\r\n        <br />\r\n        <strong className={style.caloriesTitle}>Calories:</strong>\r\n        <span> {calories.toFixed(2)} kcal</span>\r\n      </ul>\r\n      <br />\r\n      <img className={style.recipeImage} src={image} alt=\"\" width=\"200px\" />\r\n      <br />\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Recipe;\r\n","import React, { Component } from \"react\";\r\nimport Recipe from \"./Recipe\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport class RecipeList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { recipes } = this.props;\r\n    return (\r\n      <div>\r\n        {recipes.length ? (\r\n          recipes.map((r) => {\r\n            return (\r\n              <Recipe\r\n                key={uuidv4()}\r\n                title={r.recipe.label}\r\n                ingredients={r.recipe.ingredientLines}\r\n                calories={r.recipe.calories}\r\n                image={r.recipe.image}\r\n              ></Recipe>\r\n            );\r\n          })\r\n        ) : (\r\n          <h1>No results found.</h1>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RecipeList;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport RecipeList from \"./components/RecipeList\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipes: [],\n    };\n  }\n\n  setRecipes = (r) => {\n    this.setState({\n      recipes: r,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          id=\"edamam-badge\"\n          data-color=\"white\"\n          style={{ display: \"inline\" }}\n        ></div>\n        <h1 className=\"headline\">My Recipe App</h1>\n        <SearchBar setGlobalRecipes={this.setRecipes}></SearchBar>\n        <hr />\n        <RecipeList recipes={this.state.recipes}></RecipeList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"search_bar_searchBar__1KH-K\",\"searchButton\":\"search_bar_searchButton__3TMPS\"};"],"sourceRoot":""}